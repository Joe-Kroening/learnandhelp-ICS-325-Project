# from PIL import Image, ImageDraw, ImageFont, ImageSequence
# import numpy as np

# # Load the base image
# base_image_path = "/mnt/data/A_pixelated_GIF_with_a_dark_background_featuring_a.png"
# base_image = Image.open(base_image_path)

# # Function to add glitch effect to the image
# def add_glitch_effect(image, shift):
#     # Convert image to numpy array
#     image_array = np.array(image)
    
#     # Split image into three channels
#     r, g, b = image_array[:, :, 0], image_array[:, :, 1], image_array[:, :, 2]

#     # Shift the red channel
#     r = np.roll(r, shift, axis=1)

#     # Merge the channels back
#     new_image_array = np.stack([r, g, b], axis=2)
#     new_image = Image.fromarray(new_image_array, 'RGB')
    
#     return new_image

# # Create frames with slight shifts to simulate glitch effect
# frames = []
# shifts = [0, 2, -2, 1, -1, 3, -3]  # Different shift values for the glitch effect

# for shift in shifts:
#     new_frame = add_glitch_effect(base_image, shift)
#     frames.append(new_frame)

# # Save frames as separate images
# frame_paths = []
# for i, frame in enumerate(frames):
#     frame_path = f"/mnt/data/frame_{i}.png"
#     frame.save(frame_path)
#     frame_paths.append(frame_path)

# frame_paths
from PIL import Image, ImageDraw, ImageFont, ImageSequence
import numpy as np
import tkinter as tk
from tkinter import filedialog

# Function to open a file dialog to select the image file
def select_image_file():
    root = tk.Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename(title="Select an Image File", filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.gif")])
    return file_path

# Function to open a file dialog to select the save location
def select_save_location():
    root = tk.Tk()
    root.withdraw()
    folder_path = filedialog.askdirectory(title="Select Save Location")
    return folder_path

# Load the base image
base_image_path = select_image_file()
if not base_image_path:
    raise ValueError("No image file selected.")
base_image = Image.open(base_image_path)

# Function to add glitch effect to the image
def add_glitch_effect(image, shift):
    # Convert image to numpy array
    image_array = np.array(image)
    
    # Split image into three channels
    r, g, b = image_array[:, :, 0], image_array[:, :, 1], image_array[:, :, 2]

    # Shift the red channel
    r = np.roll(r, shift, axis=1)

    # Merge the channels back
    new_image_array = np.stack([r, g, b], axis=2)
    new_image = Image.fromarray(new_image_array, 'RGB')
    
    return new_image

# Create frames with slight shifts to simulate glitch effect
frames = []
shifts = [0, 2, -2, 1, -1, 3, -3]  # Different shift values for the glitch effect

for shift in shifts:
    new_frame = add_glitch_effect(base_image, shift)
    frames.append(new_frame)

# Save frames as separate images
save_location = select_save_location()
if not save_location:
    raise ValueError("No save location selected.")

frame_paths = []
for i, frame in enumerate(frames):
    frame_path = f"{save_location}/frame_{i}.png"
    frame.save(frame_path)
    frame_paths.append(frame_path)

frame_paths
